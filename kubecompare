#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kubecompare_usage() {
  if [[ -n $long_usage ]]; then
    printf "kubecompare - Take snapshots of your K8s cluster yaml and compare them later on\n"
    echo

  else
    printf "kubecompare - Take snapshots of your K8s cluster yaml and compare them later on\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kubecompare COMMAND\n"
  printf "  kubecompare [COMMAND] --help | -h\n"
  printf "  kubecompare --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Dump a cluster into a collection of yaml files\n" "dump   "
  printf "  %s   Compare a local kubedump (folder with yaml files) to the remote cluster\n" "compare"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
kubecompare_dump_usage() {
  if [[ -n $long_usage ]]; then
    printf "kubecompare dump - Dump a cluster into a collection of yaml files\n"
    echo

  else
    printf "kubecompare dump - Dump a cluster into a collection of yaml files\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  kubecompare dump [OPTIONS]\n"
  printf "  kubecompare dump --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--folder, -f FOLDER (required)"
    printf "    Folder to store the dump in\n"
    echo

    # :flag.usage
    printf "  %s\n" "--resources, -r RESOURCES"
    printf "    Cluster resources to dump (default: all cluster resources)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./kubecompare dump -f 17-feb-2023-dump-all\n"
    printf "  ./kubecompare dump -f 17-feb-2023-dump-pods-ss-ds -r \"pods statefulset\n  daemonset\"\n"
    echo

  fi
}

# :command.usage
kubecompare_compare_usage() {
  if [[ -n $long_usage ]]; then
    printf "kubecompare compare - Compare a local kubedump (folder with yaml files) to the remote cluster\n"
    echo

  else
    printf "kubecompare compare - Compare a local kubedump (folder with yaml files) to the remote cluster\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  kubecompare compare [OPTIONS]\n"
  printf "  kubecompare compare --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--folder, -f FOLDER (required)"
    printf "    Folder with files to compare against\n"
    echo

    # :flag.usage
    printf "  %s\n" "--quiet, -q"
    printf "    Do not output when differences are not found\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./kubecompare compare -f 17-feb-2023-dump-all\n"
    printf "  ./kubecompare compare -f 17-feb-2023-dump-all -q\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
kubecompare_dump_command() {
  # src/dump_command.sh
  #!/usr/bin/env bash

  set -e

  CURRENT_CONTEXT=$(kubectl config current-context)
  NAMESPACES=$(kubectl --context "${CURRENT_CONTEXT}" get ns -o jsonpath="{.items[*].metadata.name}")

  folder=${args[--folder]}
  resources=${args[--resources]}

  if [ "$resources" = "" ]; then
    # Dump all resource types
    RESOURCES=$(kubectl api-resources --namespaced -o name | tr "\n" " ")
  else
    RESOURCES="$resources"
  fi

  for ns in ${NAMESPACES}; do
    for resource in ${RESOURCES}; do
      rsrcs=$(kubectl --context "${CURRENT_CONTEXT}" -n "${ns}" get -o json "${resource}" | jq -r '.items[].metadata.name')
      for r in ${rsrcs}; do
        dir="${folder}/${CURRENT_CONTEXT}/${ns}/${resource}"
        mkdir -p "${dir}"
        kubectl --context "${CURRENT_CONTEXT}" -n "${ns}" get -o yaml "${resource}" "${r}" >"${dir}/${r}.yaml"
      done
    done
  done
}

# :command.function
kubecompare_compare_command() {
  # src/compare_command.sh
  #!/usr/bin/env bash

  folder=${args[--folder]}
  quiet=${args[--quiet]}

  shopt -s globstar # Allows the * lookup to work with bash
  for f in "$folder"/**/*.yaml; do
    if kubectl diff -f "$f"; then
      if [ -z "$quiet" ]; then
        echo "No changes detected for $(basename "$f")"
      fi
    fi
  done
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kubecompare_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    dump | d)
      action="dump"
      shift
      kubecompare_dump_parse_requirements "$@"
      shift $#
      ;;

    compare | c)
      action="compare"
      shift
      kubecompare_compare_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      kubecompare_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
kubecompare_dump_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        kubecompare_dump_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v kubectl >/dev/null 2>&1; then
    printf "missing dependency: kubectl\n" >&2
    printf "%s\n" "Visit (https://kubernetes.io/docs/tasks/tools/) for more information" >&2
    exit 1
  fi

  if ! command -v jq >/dev/null 2>&1; then
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "Visit (https://stedolan.github.io/jq/) for more information" >&2
    exit 1
  fi

  # :command.command_filter
  action="dump"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --folder | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--folder']="$2"
          shift
          shift
        else
          printf "%s\n" "--folder requires an argument: --folder, -f FOLDER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --resources | -r)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--resources']="$2"
          shift
          shift
        else
          printf "%s\n" "--resources requires an argument: --resources, -r RESOURCES" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--folder']+x} ]]; then
    printf "missing required flag: --folder, -f FOLDER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
kubecompare_compare_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        kubecompare_compare_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v kubectl >/dev/null 2>&1; then
    printf "missing dependency: kubectl\n" >&2
    printf "%s\n" "Visit (https://kubernetes.io/docs/tasks/tools/) for more information" >&2
    exit 1
  fi

  # :command.command_filter
  action="compare"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --folder | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--folder']="$2"
          shift
          shift
        else
          printf "%s\n" "--folder requires an argument: --folder, -f FOLDER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --quiet | -q)

        # :flag.case_no_arg
        args['--quiet']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--folder']+x} ]]; then
    printf "missing required flag: --folder, -f FOLDER\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "dump")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        kubecompare_dump_usage
      else
        kubecompare_dump_command
      fi
      ;;

    "compare")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        kubecompare_compare_usage
      else
        kubecompare_compare_command
      fi
      ;;

  esac
}

initialize
run "$@"
